/*
 * Facebox Enchanced (for jQuery)
 * version: 1.3
 * @requires jQuery v1.2 or later
 * @homepage https://github.com/defunkt/facebox
 *
 * Licensed under the MIT:
 *   http://www.opensource.org/licenses/mit-license.php
 *
 * Copyright Forever Chris Wanstrath, Kyle Neath
 *
 * In this version, you can initialize multiple faceboxes on one page.
 *
 * Encapsulate all document level event listener except keydown into facebox itself.
 *
 * Usage:
 *
 *  jQuery(document).ready(function() {
 *    jQuery('a[rel*=facebox]').facebox()
 *  })
 *
 *  <a href="#terms" rel="facebox">Terms</a>
 *    Loads the #terms div in the box
 *
 *  <a href="terms.html" rel="facebox">Terms</a>
 *    Loads the terms.html page in the box
 *
 *  <a href="terms.png" rel="facebox">Terms</a>
 *    Loads the terms.png image in the box
 *
 *
 *  You can also use it programmatically:
 *
 *    jQuery.facebox('some html')
 *    jQuery.facebox('some html', 'my-groovy-style')
 *
 *  The above will open a facebox with "some html" as the content.
 *
 *    jQuery.facebox(function($) {
 *      $.get('blah.html', function(data) { $.facebox(data) })
 *    })
 *
 *  The above will show a loading screen before the passed function is called,
 *  allowing for a better ajaxy experience.
 *
 *  The facebox function can also display an ajax page, an image, or the contents of a div:
 *
 *    jQuery.facebox({ ajax: 'remote.html' })
 *    jQuery.facebox({ ajax: 'remote.html' }, 'my-groovy-style')
 *    jQuery.facebox({ image: 'stairs.jpg' })
 *    jQuery.facebox({ image: 'stairs.jpg' }, 'my-groovy-style')
 *    jQuery.facebox({ div: '#box' })
 *    jQuery.facebox({ div: '#box' }, 'my-groovy-style')
 *
 *  Want to close the facebox dynamically?
 *
 *    jQuery.faceboxManager.closeCurrent();
 *    jQuery.faceboxManager.close(...);
 *
 *  Facebox also has a bunch of other callbacks:
 *
 *    loading
 *    beforeReveal
 *    reveal (aliased as 'afterReveal')
 *    init
 *    afterClose
 *
 *  Pass your customized callbacks in settings
 *
 *    jQuery.facebox({
 *       loadingCallback: function(box) {....}
 *    });
 */
(function($) {

  function Facebox(data, klass) {
    this.settings = {
      width: null,
      opacity      : 0.7,
      overlay      : true,
      overlayClosable: true,
      loadingImage : '<%= asset_path('facebox/loading.gif') %>',
      closable: true,
      closeImage   : '<%= asset_path('facebox/closelabel.png') %>',
      imageTypes   : [ 'png', 'jpg', 'jpeg', 'gif' ],
      initCallback: this._initCallback,
      loadingCallback: this._loadingCallback,
      afterCloseCallback: this._afterCloseCallback,
      beforeRevealCallback: this._beforeRevealCallback,
      revealCallback: this._revealCallback,
      afterRevealCallback: this._afterRevealCallback
    };

    this._init(data.settings || {});
    this._generateElements();
    this._loading();

    if (data.ajax) this._fillFaceboxFromAjax(data.ajax, klass);
    else if (data.image) this._fillFaceboxFromImage(data.image, klass);
    else if (data.div || data.href) this._fillFaceboxFromHref(data.div || data.href, klass);
    else if ($.isFunction(data)) data.call($);
    else this._reveal(data, klass);
  };

  Facebox.prototype.close = function() {
    if (this.jqxhr) {
      this.jqxhr.abort();
      this.jqxhr = null;
    }

    this.loadingEl.remove();
    this.contentEl.removeClass().addClass('content');

    this.el.fadeOut(function() {
      $(this).remove();
    });

    this._hideOverlay();

    this.settings.afterCloseCallback.call(this);
    return false;
  };

  Facebox.prototype._closeEventListener = function(event) {
    $.faceboxManager.close(event.data);
  }

  /*
   * Private methods
   */
  Facebox.prototype._loading = function() {
    if ($('body').find(this.loadingEl).length == 1) return true;
    this._showOverlay();

    this.contentEl.empty().append(this.loadingEl);

    this.el.show().css({
      top:  this._getPageScroll()[1] + (this._getPageHeight() / 10),
      left: $(window).width() / 2 - (this.popupWrapperEl.outerWidth(true) / 2)
    });

    this.settings.loadingCallback.call(this);
  };

  Facebox.prototype._generateElements = function() {
    this.closeImageEl = $('<img />').
      addClass('close_image').
      attr('src', this.settings.closeImage).
      attr('title', 'close');

    this.closeButtonEl = $('<a></a>').
      attr('href', '#').
      addClass('close').
      append(this.closeImageEl).
      click(this, this._closeEventListener);

    this.contentEl = $('<div></div>').addClass('content');
    if (this.settings.width)
      this.contentEl.css('width', this.settings.width);

    this.popupWrapperEl = $('<div></div>').addClass('popup');
    this.el = $('<div></div>').attr('id', 'facebox').css('display', 'none');

    this.popupWrapperEl.append(this.contentEl);
    if (this.settings.closable == true)
      this.popupWrapperEl.append(this.closeButtonEl);

    this.el.append(this.popupWrapperEl);

    this.loadingImageEl = $('<img />').attr('src', this.settings.loadingImage);
    this.loadingEl = $('<div></div>').addClass('loading').append(this.loadingImageEl);

    this.overlayEl = $('<div></div>').attr('id', 'facebox_overlay').addClass('facebox_hide');

    $('body').append(this.settings.faceboxHtml || this.el);
  };

  Facebox.prototype._reveal = function(data, klass) {
    this.settings.beforeRevealCallback.call(this);

    if (klass) this.contentEl.addClass(klass);
    this.contentEl.empty().append(data);
    this.popupWrapperEl.children().fadeIn('normal');
    this.el.css('left', $(window).width() / 2 - (this.popupWrapperEl.outerWidth() / 2));

    this.settings.revealCallback.call(this);
    this.settings.afterRevealCallback.call(this);
  };

  Facebox.prototype._init = function(settings) {
    this.settings.initCallback.call(this);

    this._makeCompatible();

    var imageTypes = this.settings.imageTypes.join('|');
    this.settings.imageTypesRegexp = new RegExp('\\.(' + imageTypes + ')(\\?.*)?$', 'i');

    if (settings) $.extend(this.settings, settings);
  };

  // getPageScroll() by quirksmode.com
  Facebox.prototype._getPageScroll = function() {
    var xScroll, yScroll;
    if (self.pageYOffset) {
      yScroll = self.pageYOffset;
      xScroll = self.pageXOffset;
    } else if (document.documentElement && document.documentElement.scrollTop) {   // Explorer 6 Strict
      yScroll = document.documentElement.scrollTop;
      xScroll = document.documentElement.scrollLeft;
    } else if (document.body) {// all other Explorers
      yScroll = document.body.scrollTop;
      xScroll = document.body.scrollLeft;
    }
    return new Array(xScroll,yScroll);
  }

  // Adapted from getPageSize() by quirksmode.com
  Facebox.prototype._getPageHeight = function() {
    var windowHeight;
    if (self.innerHeight) { // all except Explorer
      windowHeight = self.innerHeight;
    } else if (document.documentElement && document.documentElement.clientHeight) { // Explorer 6 Strict Mode
      windowHeight = document.documentElement.clientHeight;
    } else if (document.body) { // other Explorers
      windowHeight = document.body.clientHeight;
    }
    return windowHeight;
  }

  // Backwards compatibility
  Facebox.prototype._makeCompatible = function() {
    var $s = this.settings;

    $s.loadingImage = $s.loading_image || $s.loadingImage;
    $s.closeImage = $s.close_image || $s.closeImage;
    $s.imageTypes = $s.image_types || $s.imageTypes;
    $s.faceboxHtml = $s.facebox_html || $s.faceboxHtml;
  }

  // Figures out what you want to display and displays it
  // formats are:
  //     div: #id
  //   image: blah.extension
  //    ajax: anything else
  Facebox.prototype._fillFaceboxFromHref = function(href, klass) {
    // div
    if (href.match(/#/)) {
      var url    = window.location.href.split('#')[0];
      var target = href.replace(url,'');
      if (target == '#') return;
      this._reveal($(target).html(), klass);

    // image
    } else if (href.match(this.settings.imageTypesRegexp)) {
      this._fillFaceboxFromImage(href, klass);
    // ajax
    } else {
      this._fillFaceboxFromAjax(href, klass);
    }
  }

  Facebox.prototype._fillFaceboxFromImage = function(href, klass) {
    var image = new Image();
    image.onload = function() {
      this._reveal('<div class="image"><img src="' + image.src + '" /></div>', klass);
    }
    image.src = href;
  }

  Facebox.prototype._fillFaceboxFromAjax = function(href, klass) {
    var _this = this;

    this.jqxhr = $.get(href, function(data) {
      _this._reveal(data, klass);
    });
  }

  Facebox.prototype._skipOverlay = function() {
    return this.settings.overlay == false || this.settings.opacity === null;
  }

  Facebox.prototype._showOverlay = function() {
    if (this._skipOverlay()) return;

    if ($('body').find(this.overlayEl).length == 0)
      $("body").append(this.overlayEl);

    var overlay = this.overlayEl.hide().
      addClass("facebox_overlayBG").css('opacity', this.settings.opacity);

    if (this.settings.closable == true && this.settings.overlayClosable == true)
      overlay = overlay.click(this, this._closeEventListener);

    overlay.fadeIn(200);

    return false;
  }

  Facebox.prototype._hideOverlay = function() {
    if (this._skipOverlay()) return;

    this.overlayEl.fadeOut(200, function(){
      $(this).removeClass("facebox_overlayBG");
      $(this).addClass("facebox_hide");
      $(this).remove();
    });

    return false;
  }

  /*
   * Default callbacks
   */

  Facebox.prototype._initCallback = function() {
    return false;
  }

  Facebox.prototype._loadingCallback = function () {
    return false;
  };

  Facebox.prototype._afterCloseCallback = function() {
    return false;
  }

  Facebox.prototype._beforeRevealCallback = function() {
    return false;
  }

  Facebox.prototype._revealCallback = function() {
    return false;
  }

  Facebox.prototype._afterRevealCallback = function() {
    return false;
  }

  $.faceboxManager = {
    boxes: [],
    current: {},

    close: function(box) {
      if (this.boxes.size == 0)
        return;

      box.close();

      var index = this.boxes.indexOf(box);
      this.boxes.splice(index, 1);

      if (this.current == box)
        this.current = this.boxes[this.boxes.length - 1];

      box = null;
    },

    closeCurrent: function() {
      this.close(this.current);
    },

    open: function(box) {
      this.boxes.push(box);
      this.current = box;
    }
  };

  /*
   * Shortcut to create Facebox dynamically.
   */
  $.facebox = function(data, klass) {
    $.faceboxManager.open(new Facebox(data, klass));
  };

  /*
   * Public, $.fn methods
   */

  $.fn.facebox = function(settings) {
    if ($(this).length == 0) return;

    function clickHandler() {
      // support for rel="facebox.inline_popup" syntax, to add a class
      // also supports deprecated "facebox[.inline_popup]" syntax
      var klass = this.rel.match(/facebox\[?\.(\w+)\]?/);
      if (klass) klass = klass[1];

      $.faceboxManager.open(
        new Facebox({ href: this.href, settings: settings }, klass));

      return false;
    }

    return this.bind('click.facebox', clickHandler);
  };

  $(document).on('keydown.facebox', function(e) {
    if (e.keyCode == 27) $.faceboxManager.closeCurrent();
    return true;
  });

})(jQuery);
